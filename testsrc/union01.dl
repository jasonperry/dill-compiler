(* variant (formerly union) types with case statements. *)
module union01 begin

open stdio;

type Num is variant
  | f: Float
  | i: Int
  | nan;

type Flags is variant
  | local
  | remote
  | gone;

export proc main() => Int
begin
  var u1: Num = Num|i(4);
  (* var myf: Float = 5.6; *)
  var u2 = Num|f(5.5);
  var u3 = Num|nan;
  (* var flag1 = Flags|remote; *)
  (* var x: Int = 4; *)

  var i: Int = 0;
  while i < 3 loop
  
    if i == 1 then
      u1 = Num|f(5.5);
    elsif i == 2 then
      u1 = Num|nan;
    endif
  
    case u1
      of Num|nan then 
        printString("nan"); 
      of Num|i(i) then
        printInt(i);
      of Num|f(f) then
        printFloat(f);
        (* printFloat(myf); *)
      (* else
        printString("leftovers"); *)
    endcase
    i = i + 1;
  endwhile

  (* var f1 = Flags|remote;
  case f1
  of Flags|local then
    printString("local");
  else
    printString("not local");
  endcase *)

  return 0;

end main

end union01