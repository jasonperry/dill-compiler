(* union and case with nullable type *)

module union02 begin

open stdio;

type Num is variant
  | fo: Float?
  | i: Int;

export proc main() => Int
begin
  var u1 = Num|i(4);
  var fm: Float? = 5.5;
  (* var u2 = Num|fo(fm); *)
  var u2 = Num|fo(null); (* bugfix needed *)

  (* good I did this, it wasn't catching the type error in the case. *)
  var u3: Num? = null;

  (* This works fine (at least parsing) *)
  (* var u2: Num = Num|fo(5.5); *)

  case u2
    of Num|i(i) then
      printInt(i);
    of Num|fo(nf) then
      (*case nf
        of null then 
          printString("nothing in there.");
	of val(f) then
	  printFloat(f);
      endcase *)
      nop;
      (* case ... *)
      (* printFloat(f); *)
  endcase

  return 0;

end main

end union02