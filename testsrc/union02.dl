(* union with nullable type *)

module union02 begin

open stdio;

type Num is variant
  | f: Float?
  | i: Int;

export proc main() => Int
begin
  var u1 = Num|i(4);
  var fm: Float? = 5.5;
  var u2 = Num|f(fm);

  (* good I did this, it wasn't catching the type error in the case. *)
  var u3: Num? = Null;

  (* should probably be able to do this. *)
  (* var u2: Num = (5.5: Float?); *)

  case u2
    of Num|i(i) then
      printInt(i);
    of Num|f(nf) then
      printString("Need code for nullable cases");
      (* case ... *)
      (* printFloat(f); *)
  endcase

  return 0;

end main

end union02